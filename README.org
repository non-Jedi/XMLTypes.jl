* XMLTypes

The is the README for [[https://github.com/non-Jedi/XMLTypes.jl][XMLTypes.jl]], an attempt to use Julia's type system to
sanely generate xml. In particular, I will be using this to write webpages in
"XHTML5". As a [[https://orgmode.org/worg/org-contrib/babel/intro.html#literate-programming][literate program]], this document is also the canonical source code
for XMLTypes.jl.

All text in this document, the source code generated from this document, and all
other associated files are under copyright of [[Authors][the authors of XMLTypes.jl]] unless
otherwise noted. The aforementioned items are available for your use subject to
[[https://github.com/non-Jedi/XMLTypes.jl/blob/master/COPYING][the GNU Affero Public License, Version 3.0+]].

** Contributing

At this time this project follows a workflow for non-core contributors as
follows:

1. Fork [[https://github.com/non-Jedi/MatrixClientProtocol.jl][the repository for this software on github]].
2. Checkout a new branch of the repository locally.
3. Make changes to README.org on your branch.
4. Add your name to [[Authors]].
5. Commit changes, trying your best to follow best practices for commit scoping
   and commit message formatting.
6. Push your branch back to a branch on your github fork of the project.
7. Issue a pull request from your branch to the master branch of the root
   repository.
8. I will review your pull request, merge it, generate the new "tangled" source
   code from README.org, and push a new commit to master.

If you are experienced with org-mode, you may include a commit generating new
source code in your pull request. A description of how to do so is available in
the org-mode documentation.

By issuing a pull request to this repository, you agree to release your
contribution under [[https://github.com/non-Jedi/MatrixClientProtocol.jl/blob/master/LICENSE.md][the terms of this project's license]].

** Authors
- [[https://matrix.to/#/@adam:thebeckmeyers.xyz][Adam Beckmeyer]]

** COPYING
#+NAME: copying
#+BEGIN_SRC julia
  # Copyright 2018 Adam Beckmeyer
  #
  # This file is part of XMLTypes.jl.
  # XMLTypes.jl is free software: you can redistribute it and/or modify
  # it under the terms of the GNU Affero General Public License as published by
  # the Free Software Foundation, either version 3 of the License, or
  # (at your option) any later version.
  #
  # XMLTypes.jl is distributed in the hope that it will be useful,
  # but WITHOUT ANY WARRANTY; without even the implied warranty of
  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  # GNU Affero General Public License for more details.
  #
  # You should have received a copy of the GNU Affero General Public License
  # along with XMLTypes.jl.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC
** XMLTypes.jl

An XML document is composed of "Elements" that look something like ~<xmltag
attribute="cool">this is element content</xmltag>~; for the purpose of this
library, each element name (e.g. div, head, body, p, etc.) will be represented
by a separate type. These types must be subtypes of an abstract XML element
type.

#+NAME: XMLElement
#+BEGIN_SRC julia
  export XMLElement

  "Represents an XML element (e.g. `<xml attr=\"string\">content</xml>`)."
  abstract type XMLElement end
#+END_SRC

A basic XML element should have the following fields:
- ~attributes::Vector{Pair{String,String}}~
- ~content::Vector{Union{String,XMLElement}}~

We define the functions ~attributes~ and ~content~ to simply return these fields
for the abstract type; these function should be considered the canonical way of
accessing information on a particular XML element. For more complex situations,
users may define methods of ~attributes~ and ~content~ to return any iterator
with elements of the correct type.

#+NAME: attributes-and-content
#+BEGIN_SRC julia
  export attributes, content

  "Returns iterator of `Pair{String,String}` attributes for element."
  attributes(element::XMLElement) = element.attributes

  "Returns iterator of `Union{String,XMLElement}` for element contents."
  content(element::XMLElement) = element.content
#+END_SRC

#+NAME: test-attributes-and-content
#+BEGIN_SRC julia
  struct TestElement <: XMLElement
      attributes::Vector{Pair{String,String}}
      content::Vector{Union{String,XMLElement}}
  end#struct

  XMLTypes.name(::TestElement) = "test"

  attr = ["class" => "good", "id" => "4"]
  cont = ["hello world ", TestElement([], [])]
  t = TestElement(attr, cont)

  @test attributes(t) == attr
  @test content(t) == cont
#+END_SRC

Additionally, we'll need a function for returning the name of an XML element:
something like ~name(element::XMLElement) = "div"~. We'll create a macro for
automating some of this stuff later.

#+NAME: name
#+BEGIN_SRC julia
  # stub `name` method so users can override later
  export name
  name(::XMLElement) = ""
#+END_SRC

Now we need to turn an XML element type into its tag representation.

#+NAME: dump
#+BEGIN_SRC julia
  export dump_attributes, dump

  "Turns an iterator of `Pair{String,String}` into standard XML tag attributes."
  function dump_attributes(attributes)::String
      join(map(p -> " $(p.first)=\"$(p.second)\"", attributes), "")
  end

  "Turns an `XMLElement` into its canonical tag-form representation."
  function dump(element::XMLElement)::String
      element_name = name(element)
      attr_str = dump_attributes(attributes(element))
      # XML tags can be jammed together, and strings require appropriate spaces
      # TODO: what is max allowed depth of recursion? Problematic for normal uses?
      content_str = join(dump.(content(element)), "")
      # If no content, we can use a self-closing tag
      if length(content(element)) == 0
          "<$element_name$attr_str />"
      else
          """
          <$element_name$attr_str>
              $content_str
          </$element_name>
          """
      end#if
  end#function

  # `content(element)` is mixed vector of strings and elements to fuse `dump` on
  dump(s::AbstractString) = s
#+END_SRC

#+NAME: test-dump
#+BEGIN_SRC julia
  const expected_dump = """
  <test class="good" id="4">
      hello world <test />
  </test>
  """

  @test XMLTypes.dump(t) == expected_dump
#+END_SRC

*** Putting it all together

Lastly, we bind all the previous segments together into ~XMLTypes.jl~ and the
tests into ~runtests.jl~.

#+BEGIN_SRC julia :tangle src/XMLTypes.jl :noweb yes
  <<copying>>

  module XMLTypes

  <<XMLElement>>

  <<attributes-and-content>>

  <<name>>

  <<dump>>

  end#module
#+END_SRC

#+BEGIN_SRC julia :tangle test/runtests.jl :noweb yes
  using XMLTypes
  @static if VERSION < v"0.7.0-DEV.2005"
      using Base.Test
  else
      using Test
  end

  <<test-attributes-and-content>>

  <<test-dump>>
#+END_SRC
